[alias]
	a = add
	ad = add
	# https://nuclearsquid.com/writings/git-add/
	adp = add --patch

	br = branch
	brd = branch -D

	co = commit
	com = commit -m
	coa = commit --amend --no-edit

	di = diff
	dis = diff --staged
	# dii for "DIff Inline"
	dii = -c delta.side-by-side=false diff

	ps = "!git push origin $(git branch-name)"

	sw = switch
	swc = switch -c

	re = rebase
	# Interactive rebase with the given number of latest commits.
	rei = "!r() { git rebase -i HEAD~$1; }; r"

	# Readable concise status
	s = st
	st = status -s -b

	# Readable pretty logs
	l = lo
	lo = log --format='%h %Cred%ar%Creset %Cgreen%s' --graph

	# View aliases
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\:\\ /

	# Get the current branch name (not so useful in itself, but used in
	# other aliases) via https://gist.github.com/robmiller/6018582
	branch-name = "!git rev-parse --abbrev-ref HEAD"

	# Reset the current branch to origin's version
	rs = "!git stash && git fetch origin -p && git reset --hard origin/$(git branch-name)"

	# Delete all local branches that have been merged with the current branch. Ref: https://stackoverflow.com/a/46192689/517553
	dm = "!git fetch -p && git branch -vv | grep ': gone]' | grep -v \"*\" | awk '{ print $1; }' | xargs -r git branch -d"

	# Amend the previous commit
	amend = "!git add -A && git commit --amend --no-edit"

	# Update logs based on http://stackoverflow.com/a/34467298/517553
	lo1 = "!git lo1-specific --all"
	lo2 = "!git lo2-specific --all"
	lo3 = "!git lo3-specific --all"

	lo1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
	lo2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	lo3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

	# 'NEW BrancheS' list local branches ordered by newest commit date
	newbs = for-each-ref --sort=committerdate refs/heads/ --format='%(color:reset)committed: %(color:yellow)%(committerdate:short) %(color:cyan)%(refname:short) %(color:reset)%(authorname)'

	# Push the current branch to origin and track it
	# publish = "!git push -u origin $(git branch-name)"

	# Checkout a new branch in the format feat/{feature-name}
	# nf = "!f() { git checkout -b \"feat/$1\" 2> /dev/null || git checkout \"feat/$1\"; }; f"

	# Reset the current branch to upstream's version
	# rs-upstream = "!git stash && git fetch upstream -p && git reset --hard upstream/$(git branch-name)"

	# Merge changes from upstream into current branch
	# merge-upstream = "!git rs-upstream"

[core]
	editor = micro
	excludesfile = ~/.gitignore
	pager = delta
	# http://www.git-tower.com/blog/make-git-rebase-safe-on-osx
	# 2020 note. is this still needed?
	trustctime = false
[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[diff]
	renames = copies # Detect copies as well as renames
	algorithm = histogram # Histogram can give 'more human' diffs. 
[include]
	path = .gitconfig.personal
[init]
	defaultBranch = main
[merge]
	log = true # Include summaries of merged commits in newly created merge commit messages
	conflictStyle = zdiff3 # Nicer diffs, hopefully. See https://github.blog/2022-01-24-highlights-from-git-2-35/
[pull]
	rebase = true
[push]
	default = simple
	autoSetupRemote = true
[rebase]
	autostash = true
	autosquash = true

# Delta config
[interactive]
	diffFilter = delta --color-only --features=interactive
[delta]
	features = decorations
	side-by-side = true
	syntax-theme = Nord
[delta "interactive"]
	keep-plus-minus-markers = false
[delta "decorations"]
	commit-decoration-style = blue ol
	commit-style = raw
	file-style = omit
	hunk-header-decoration-style = blue box
	hunk-header-file-style = red
	hunk-header-line-number-style = "#067a00"
	hunk-header-style = file line-number syntax