[alias]
	# Readable concise status
	s = status -s -b

	# Readable pretty logs
	l = log --format='%h %Cred%ar%Creset %Cgreen%s' --graph

	# View aliases
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\:\\ /

	# Get the current branch name (not so useful in itself, but used in
	# other aliases) via https://gist.github.com/robmiller/6018582
	branch-name = "!git rev-parse --abbrev-ref HEAD"

	# Reset the current branch to upstream's version
	rs-upstream = "!git stash && git fetch origin -p && git reset --hard upstream/$(git branch-name)"

	# Rebase the current branch against upstream's master
	rb-upstream = "!git stash && git fetch upstream && git rebase upstream/master"

	# Reset the current branch to origin's version
	rs-origin = "!git stash && git fetch origin -p && git reset --hard origin/$(git branch-name)"

	# Rebase the current branch against origin's master
	rb-origin = "!git stash && git fetch origin && git rebase origin/master"

	# Push the current branch to origin and track it
	publish = "!git push -u origin $(git branch-name)"

	# Fetch origin, checkout develop and reset local develop to origin's develop
	# rsd = "!git stash && git fetch origin -p && git checkout develop && git reset --hard origin/develop"

	# Fetch origin and rebase the current branch against origin's develop
	# rbd = "!git fetch origin -p && git rebase origin/develop"

	# Fetch origin, checkout master and reset local master to origin's master
	rsm = "!git checkout master && git rs-origin"

	# Checkout a new branch in the format mike/{feature-name}
	nf = "!f() { git checkout -b \"mike/$1\" 2> /dev/null || git checkout \"mike/$1\"; }; f"

	# Delete all local branches that have been merged with master
	# dm = "!git rsm && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Delete all local branches that have been merged with the current branch
#	dm = "!git branch --merged | egrep -v '(^\*|master|develop)' | xargs git branch -d"

	# Amend the previous commit
	amend = "!git add -A && git commit --amend --no-edit"

	# Merge changes from upstream into master
	merge-upstream = "!git rs-upstream"

	# Update logs based on http://stackoverflow.com/a/34467298/517553
	lg = "!git lg1"
    lg1 = "!git lg1-specific --all"
    lg2 = "!git lg2-specific --all"
    lg3 = "!git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'


[core]
	editor = vim
	excludesfile = ~/.gitignore
	# http://www.git-tower.com/blog/make-git-rebase-safe-on-osx
	trustctime = false
[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[push]
	default = simple
[diff]
	# Detect copies as well as renames
	renames = copies